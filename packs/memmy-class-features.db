{"name":"Quickened Arts","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 11th level, you have achieved a signature art that is second nature to you. Choose one Archaic Art you know that has a usage time of 1 action, you can now use it as a bonus action. You can change your signature art upon finishing a long rest.</p>\n<p>If you do not know an Archaic Art with a usage time of 1 action, you may instead choose a third level or lower Siphoner spell that resotres hit points with a cast time of 1 action. You may now cast it as a bonus action.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 11","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/quickened-arts.jpg","effects":[],"_id":"53CYoJMUuzMSJBkm"}
{"name":"Arcana Conversion","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 15th level, you can turn your siphoned energy into more than just HP. Whenever a Siphoner class feature or spell allows you to regain hit points, you can instead regain a spell slot with a level no greater than one fifth of the total hit points that would've been regained. (Rounded down)</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 15","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/arcana-conversion.jpg","effects":[],"_id":"T2HOBKDuj6VChjXL"}
{"name":"Energy Drain","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 1st level, you have begun to dabble into learning how to siphon energy. Whenever you deal damage with a weapon attack to a living creature or a creature with a soul, you may choose to drain energy from them.</p>\n<p>Roll one of your available hit dice (If you have any, if not you can not activate this feature). You may recover a number of hit points equal to the hit die roll (This recovered HP can be no greater than the damage dealt with the weapon attack).</p>\n<p>Additionally, upon reducing a hostile creature to 0 HP, you regain one expended hit die up to your maximum.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"none","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":"0","per":""},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"other","attackBonus":"0","chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 1","recharge":{"value":null,"charged":false}},"flags":{"core":{"sourceId":"Item.bwJsy5hNjTXSFRQg"},"itemacro":{"macro":{"_data":{"name":"Energy Drain","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Energy Drain\";\nconst cancel = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: \"\",\n    buttons: {\n      heal: {\n        icon: \"\",\n        label: \"Heal\",\n        callback: () => heal(),\n      },\n      regain: {\n        icon: \"\",\n        label: \"Regain Hit Die\",\n        callback: () => regainHitDie(),\n      },\n      cancel: cancel,\n    },\n    default: \"heal\",\n  }).render(true);\n}\n\nfunction heal() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n  // Check Available Dice\n  if (diceData.available == 0) {\n    ui.notifications.warn(\"You need to have at least one remaining hit die to activate Energy Drain!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to roll:\", diceData.dice);\n\n  let content = `\n     <p>Please select the hit die to use for this ability.</p>\n     <form>\n      ${hitDieHtml}\n      <div class=\"form-group\">\n       <label>Enter the damage from your attack</label>\n       <input id=\"damage\" type=\"text\" inputmode=\"numeric\"></input>\n      </div>\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Roll\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            ui.notifications.warn(\"You need to provide the amount of damage dealt by your attack!\");\n            return;\n          }\n          executeHeal(die, damage);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction executeHeal(die, maxHeal) {\n  let source = die.source;\n\n  // update count\n  if (source.type === \"class\")\n    source.update({\n      \"data.hitDiceUsed\": dice.used + 1,\n    });\n  else {\n    source.update({\n      \"data.uses.value\": dice.available - 1,\n    });\n  }\n\n  let maxHP = actor.data.data.attributes.hp.max;\n  let currentHP = actor.data.data.attributes.hp.value;\n  let missingHP = maxHP - currentHP;\n\n  // roll healing\n  let hp = new Roll(die.size).roll().total;\n\n  let toHeal = Math.min(hp, maxHeal, missingHP);\n  currentHP += toHeal;\n  let text;\n\n  if (maxHeal > missingHP && hp > missingHP) {\n    // user overheals and should be limited\n    let overheal = hp - missingHP;\n    text = `${actor.name} healed ${toHeal}, and restored himself to full hp! (overhealed ${overheal} hp)`;\n  } else if (hp > maxHeal) {\n    // user heals to much, and should be limited to maxheal value\n    text = `${actor.name} healed ${toHeal}! (limited to damage dealt)`;\n  } else {\n    // user heals hp\n    text = `${actor.name} healed ${toHeal}!`;\n  }\n\n  // Heal player\n  actor.update({ \"data.attributes.hp.value\": currentHP });\n\n  // Create chat message\n  let chatData = {\n    user: game.user._id,\n    content: text,\n  };\n\n  ChatMessage.create(chatData, {});\n\n  return;\n}\n\nfunction regainHitDie() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n\n  if (diceData.expended === 0) {\n    ui.notifications.warn(\"You already have the max amount of available hit die!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to regain:\", diceData);\n\n  let content = `\n     <p>Please select the hit die to regain.</p>\n     <form>\n      ${hitDieHtml}\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Regain\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let source = die.source;\n\n          // update count\n          if (source.type === \"class\")\n            source.update({\n              \"data.hitDiceUsed\": dice.used - 1,\n            });\n          else {\n            source.update({\n              \"data.uses.value\": dice.available + 1,\n            });\n          }\n\n          let chatData = {\n            user: game.user._id,\n            content: `${actor.name} drains the killed enemy and regains 1 hit die (${size}).`,\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction getHitDieSelectionHtml(text, dice) {\n  let options = \"\";\n  for (let die in dice) {\n    options += `<option value=\"${die}\">${die.displayName}</option>`;\n  }\n\n  let html = `\n        <div class=\"form-group\">\n         <label>${text}</label>\n         <select id=\"die\">${options}</select>\n        </div>\n    `;\n\n  return html;\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"Energy Drain","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Energy Drain\";\nconst cancel = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: \"\",\n    buttons: {\n      heal: {\n        icon: \"\",\n        label: \"Heal\",\n        callback: () => heal(),\n      },\n      regain: {\n        icon: \"\",\n        label: \"Regain Hit Die\",\n        callback: () => regainHitDie(),\n      },\n      cancel: cancel,\n    },\n    default: \"heal\",\n  }).render(true);\n}\n\nfunction heal() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n  // Check Available Dice\n  if (diceData.available == 0) {\n    ui.notifications.warn(\"You need to have at least one remaining hit die to activate Energy Drain!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to roll:\", diceData.dice);\n\n  let content = `\n     <p>Please select the hit die to use for this ability.</p>\n     <form>\n      ${hitDieHtml}\n      <div class=\"form-group\">\n       <label>Enter the damage from your attack</label>\n       <input id=\"damage\" type=\"text\" inputmode=\"numeric\"></input>\n      </div>\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Roll\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            ui.notifications.warn(\"You need to provide the amount of damage dealt by your attack!\");\n            return;\n          }\n          executeHeal(die, damage);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction executeHeal(die, maxHeal) {\n  let source = die.source;\n\n  // update count\n  if (source.type === \"class\")\n    source.update({\n      \"data.hitDiceUsed\": dice.used + 1,\n    });\n  else {\n    source.update({\n      \"data.uses.value\": dice.available - 1,\n    });\n  }\n\n  let maxHP = actor.data.data.attributes.hp.max;\n  let currentHP = actor.data.data.attributes.hp.value;\n  let missingHP = maxHP - currentHP;\n\n  // roll healing\n  let hp = new Roll(die.size).roll().total;\n\n  let toHeal = Math.min(hp, maxHeal, missingHP);\n  currentHP += toHeal;\n  let text;\n\n  if (maxHeal > missingHP && hp > missingHP) {\n    // user overheals and should be limited\n    let overheal = hp - missingHP;\n    text = `${actor.name} healed ${toHeal}, and restored himself to full hp! (overhealed ${overheal} hp)`;\n  } else if (hp > maxHeal) {\n    // user heals to much, and should be limited to maxheal value\n    text = `${actor.name} healed ${toHeal}! (limited to damage dealt)`;\n  } else {\n    // user heals hp\n    text = `${actor.name} healed ${toHeal}!`;\n  }\n\n  // Heal player\n  actor.update({ \"data.attributes.hp.value\": currentHP });\n\n  // Create chat message\n  let chatData = {\n    user: game.user._id,\n    content: text,\n  };\n\n  ChatMessage.create(chatData, {});\n\n  return;\n}\n\nfunction regainHitDie() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n\n  if (diceData.expended === 0) {\n    ui.notifications.warn(\"You already have the max amount of available hit die!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to regain:\", diceData);\n\n  let content = `\n     <p>Please select the hit die to regain.</p>\n     <form>\n      ${hitDieHtml}\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Regain\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let source = die.source;\n\n          // update count\n          if (source.type === \"class\")\n            source.update({\n              \"data.hitDiceUsed\": dice.used - 1,\n            });\n          else {\n            source.update({\n              \"data.uses.value\": dice.available + 1,\n            });\n          }\n\n          let chatData = {\n            user: game.user._id,\n            content: `${actor.name} drains the killed enemy and regains 1 hit die (${size}).`,\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction getHitDieSelectionHtml(text, dice) {\n  let options = \"\";\n  for (let die in dice) {\n    options += `<option value=\"${die}\">${die.displayName}</option>`;\n  }\n\n  let html = `\n        <div class=\"form-group\">\n         <label>${text}</label>\n         <select id=\"die\">${options}</select>\n        </div>\n    `;\n\n  return html;\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}},"midi-qol":{"onUseMacroName":"ItemMacro"},"favtab":{"isFavorite":true,"sort":null}},"img":"modules/memmy/assets/icons/energy-drain.webp","effects":[],"_id":"XRcb4OivKBVzzwlV"}
{"name":"Archaic Arts","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>At second level, you begin to unlock the secrets of Archaic Arts. Archaic arts are special techniques that bestow a variety of benefits upon you, whether those bonuses be passives like resistances, or active abilities like new action options.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 2","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/archaic-arts.jpg","effects":[],"_id":"baQR75VcceFaPwGd"}
{"name":"Spellcasting (Siphoner)","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<h3>Preparing and Casting Spells</h3>\n<p>The Siphoner table shows how many spell slots you have to cast your spells. To cast one of your Siphoner spells of 1st level or higher, you must expend of the spell's level or higher. You regain all expended spell slots when you finish a long rest.</p>\n<p>You prepare the list of Siphoner spells that are available for you to cast, choosing from the Siphoner spell list. When you do so, choose a number of Siphoner spells equal to your Intelligence modifier + half your Siphoner level, rounded down (minimum of one spell). Tje spells must be of a level for which you have spell slots. You can change your list of prepared spells when you finish a long rest.</p>\n<p>&nbsp;</p>\n<h3>Spellcasting ability</h3>\n<p>Intelligence is your spellcasting ability for your Siphoner spells. You use your Intelligence whenever a spell refers to your spellcasting ability. In addition, you use your Intelligence modifier when setting the saving throw DC for a Siphoner spell you cast and when making an attack roll with one.</p>\n<p>&nbsp;</p>\n<p style=\"text-align: center;\"><strong>Spell save DC&nbsp;</strong>= 8 + your proficiency bonus + your Intelligence modifier</p>\n<p style=\"text-align: center;\"><strong>Spell attack modifier</strong> = your proficiency bonus + your Intelligence modifier</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<h3 style=\"text-align: left;\">Spellcasting focus</h3>\n<p>You may use any arcane focus as a spellcasting focus for your Siphoner spells.</p>\n<p>&nbsp;</p>\n<h3>Spell List</h3>\n<p><strong>1st Level</strong></p>\n<ul>\n<li>Absorb Elements</li>\n<li>Armor of Agathys</li>\n<li>Bane</li>\n<li>Cause Fear</li>\n<li>Cure Wounds</li>\n<li>Detect Magic</li>\n<li>False Life</li>\n<li>Hex</li>\n<li>Longstrider</li>\n<li>Inflict Wounds</li>\n<li>Magic Missile</li>\n<li>Ray of Sickness</li>\n<li>Sleep</li>\n<li>Tasha's Caustic Brew</li>\n</ul>\n<p><strong>2nd Level</strong></p>\n<ul>\n<li>Aid</li>\n<li>Darkness</li>\n<li>Earhbind</li>\n<li>Enthrall</li>\n<li>Gentle Repose</li>\n<li>Healing Spirit</li>\n<li>Lesser Restoration</li>\n<li>Misty Step</li>\n<li>Shadow Blade</li>\n<li>Spider Climb</li>\n</ul>\n<p><strong>3rd Level</strong></p>\n<ul>\n<li>Aura of Vitality</li>\n<li>Bestow Curse</li>\n<li>Counterspell</li>\n<li>Feign Death</li>\n<li>Gaseous Form</li>\n<li>Hunger of Hadar</li>\n<li>Life Transference</li>\n<li>Slow</li>\n<li>Vampiric Touch</li>\n</ul>\n<p><strong>4th Level</strong></p>\n<ul>\n<li>Auro of Life</li>\n<li>Banishment</li>\n<li>Blight</li>\n<li>Death Ward</li>\n<li>Freedom of Movement</li>\n<li>Shadow of Moil</li>\n<li>Sickening Radiance</li>\n<li>Stoneskin</li>\n<li>Vitriolic Sphere</li>\n</ul>\n<p><strong>5th Level</strong></p>\n<ul>\n<li>Animate Objects</li>\n<li>Antilife Shell</li>\n<li>Enervation</li>\n<li>Fat Step</li>\n<li>Greater Restoration</li>\n<li>Passwall</li>\n<li>Steel Wind Strike</li>\n<li>Synaptic Static</li>\n<li>Wall of Force</li>\n</ul>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 2","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/spellcasting-siphoner.jpg","effects":[],"_id":"cGPgVyVV6UsPExpg"}
{"name":"Beyond Mortality","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 20th level, you have glimpsed between life and death and now exist beyond both. You stop aging and can no longer die of old age.</p>\n<p>Additionally, you gain 10 bonus hit die for the purpose of fueling your class features and Archaic Arts. You do not gain additional maximum HP from these hit die, and you regain all of them upon finishing a long rest.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"none","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":10,"max":"10","per":"lr"},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 20","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":""}},"img":"modules/memmy/assets/icons/beyond-mortality.jpg","effects":[],"_id":"iNaNLLEP3YHtr8Nf"}
{"name":"Better When Bleeding","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 1st level, you know that it's better to take hits than attempt to nullify them.</p>\n<p>Your AC now takes a penalty equal to your Constitution Modifier (Minimum of 1) additionally, your maximum HP increases by your Constitution Modifier x your current Siphoner level.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 1","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/better-when-bleeding.webp","effects":[{"_id":"Rn8OStWdMXrJmVqs","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[{"key":"data.attributes.ac.value","value":"- max(1, @abilities.con.mod)","mode":2,"priority":20}],"disabled":false,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/better-when-bleeding.webp","label":"Better when bleeding","origin":"Item.L7AUdlUWMAum0zhu","tint":"","transfer":true}],"_id":"kBqEtxMskHehmjJ8"}
{"name":"Infused Flesh","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 6th level, you know how to turn your magic into raw might. As a bonus action you may expend one of your available spell slots, you gain temporary hit points equal to 5 times the spells level. These hit points are added on to any hit points you already currently have.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"bonus","cost":1,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":"0","per":""},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"other","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 6","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":"ItemMacro"},"itemacro":{"macro":{"_data":{"name":"Infused Flesh","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Infused Flesh\";\n\nif (args[0].tag == \"OnUse\") {\n  let slotsData = memmy.getAllSpellSlots(actor);\n  if (slotsData.total <= 0) {\n    ui.notifications.warn(\"You have no spell slots available for this feature!\");\n    return;\n  }\n\n  let spellSlotsHtml = ``;\n\n  for (let slot of spellSlots.slots) {\n    if (slot.available > 0) {\n      spellSlotsHtml += `<option value=\"${slot.id}\">${slot.displayName} (${slot.available})</option>`;\n    }\n  }\n\n  let content = `\n    <p> Please select the spell slot to use for this ability.\n    <form>\n        <div class=\"form-group\">\n            <select id=\"spellSlot\">\n                ${spellSlotsHtml}\n            </select>\n        </div>\n    </form>\n  `;\n\n  let buttons = {\n    ok: {\n      icon: \"\",\n      label: \"Ok\",\n      callback: (html) => {\n        let slotId = html.find(\"[id=spellSlot]\")[0].value;\n        let slot = slotsData.slots.find((s) => s.id == slotId);\n\n        var tempHP = actor.data.data.attributes.hp.temp;\n        var extraTempHP = 5 * slot.level;\n        var spellSlotPath = `data.spells.${slotId}.value`;\n\n        let updateData = {\n          \"data.attributes.hp.temp\": tempHP + extraTempHP,\n        };\n        updateData[spellSlotPath] = slot.available - 1;\n\n        actor.update(updateData);\n      },\n    },\n    cancel: {\n      icon: \"\",\n      label: \"Cancel\",\n    },\n  };\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: buttons,\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"Infused Flesh","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Infused Flesh\";\n\nif (args[0].tag == \"OnUse\") {\n  let slotsData = memmy.getAllSpellSlots(actor);\n  if (slotsData.total <= 0) {\n    ui.notifications.warn(\"You have no spell slots available for this feature!\");\n    return;\n  }\n\n  let spellSlotsHtml = ``;\n\n  for (let slot of spellSlots.slots) {\n    if (slot.available > 0) {\n      spellSlotsHtml += `<option value=\"${slot.id}\">${slot.displayName} (${slot.available})</option>`;\n    }\n  }\n\n  let content = `\n    <p> Please select the spell slot to use for this ability.\n    <form>\n        <div class=\"form-group\">\n            <select id=\"spellSlot\">\n                ${spellSlotsHtml}\n            </select>\n        </div>\n    </form>\n  `;\n\n  let buttons = {\n    ok: {\n      icon: \"\",\n      label: \"Ok\",\n      callback: (html) => {\n        let slotId = html.find(\"[id=spellSlot]\")[0].value;\n        let slot = slotsData.slots.find((s) => s.id == slotId);\n\n        var tempHP = actor.data.data.attributes.hp.temp;\n        var extraTempHP = 5 * slot.level;\n        var spellSlotPath = `data.spells.${slotId}.value`;\n\n        let updateData = {\n          \"data.attributes.hp.temp\": tempHP + extraTempHP,\n        };\n        updateData[spellSlotPath] = slot.available - 1;\n\n        actor.update(updateData);\n      },\n    },\n    cancel: {\n      icon: \"\",\n      label: \"Cancel\",\n    },\n  };\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: buttons,\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}}},"img":"modules/memmy/assets/icons/infused-flesh.jpg","effects":[],"_id":"kYpqk3cq4QZNsN7L"}
{"name":"Stolen Vitality","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 3rd level, you are immune to effects that magically age you such as a ghosts horrifyin visage, as&nbsp; you have further learned how to sustain your own life energy.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 3","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/stolen-vitality.jpg","effects":[],"_id":"qrkGKYR5PPyNhFfS"}
{"name":"On the Edge","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 10th level, your soul rejects the dangerous effects of magic. When you are subjected to an effect that allows you to make a saving throw to either avoid or take half-damage on a succesful save (Such as the fireball spell or a dragons breath weapon) you may choose to automatically fail it. If you do so, you may choose one of the following benefits:</p>\n<ul>\n<li><strong>Bulk up:</strong> Your @Item[L7AUdlUWMAum0zhu]{Better When Bleeding} AC penalty no longer applies until the end of your next turn.</li>\n<li><strong>Intensify:</strong> You add your Constitution modifier to the damage rolls of your Archaic Arts and Weapon attacks until the end of your next turn.</li>\n<li><strong>Lock On:</strong> You have advantage on attack rolls against the creature who forced you to make the save until the end of your next turn, additionally they have disadvantage on saving throws against your Archaic Arts.</li>\n<li><strong>Thick Skin:</strong> You gain temporary hit points equal to your Siphoner level (Maximum of half the damage taken from the trigger of this feature)</li>\n</ul>\n<p>You may use this feature a number of times equal to your intelligence modifier (Minimum of 1).</p>\n<p>You regain all uses upon finishing a long rest.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"none","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"@abilities.int.mod","per":"lr"},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"other","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 10","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":"ItemMacro"},"itemacro":{"macro":{"_data":{"name":"On the Edge","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"On The Edge\";\nconst cancelButton = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nconst bwb = \"Better when bleeding\";\nconst bulkUp = \"Bulk Up\";\nconst intensify = \"Intensify\";\nconst lockOn = \"Lock On\";\n\nconst disabledPath = \"disabled\";\n\nconst bwbItemLink = \"@Item[L7AUdlUWMAum0zhu]{Better When Bleeding}\";\nconst archaicArtsItemLink = \"@Item[OM7SdcYcni5VIruv]{Archaic Arts}\";\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: `Please select an effect: `,\n    buttons: {\n      bulkUp: {\n        icon: \"\",\n        label: \"Bulk Up\",\n        callback: executeBulkUp,\n      },\n      intensify: {\n        icon: \"\",\n        label: \"Intensify\",\n        callback: executeIntensify,\n      },\n      lockOn: {\n        icon: \"\",\n        label: \"Lock On\",\n        callback: executeLockOn,\n      },\n      thickSkin: {\n        icon: \"\",\n        label: \"Thick Skin\",\n        callback: executeThickSkin,\n      },\n      cancel: cancelButton,\n    },\n    default: \"cancel\",\n  }).render(true);\n}\n\nfunction executeBulkUp() {\n  var betterWhenBleedingEffect = memmy.getEffectByName(actor, bwb);\n  var bulkUpEffect = memmy.getEffectByName(actor, bulkUp);\n\n  memmy.disableEffect(betterWhenBleedingEffect);\n  memmy.enableEffect(bulkUpEffect);\n\n  let chatMessage = `${actor.name} bulks up, and ignores his AC penalty from ${bwbItemLink} until the end of their next turn.`;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeIntensify() {\n  var intensifyEffect = memmy.getEffectByName(actor, intensify);\n\n  memmy.enableEffect(intensifyEffect);\n\n  let chatMessage = `${actor.name} intensifies, adding their constitution modifier to the damage rolls of their ${archaicArtsItemLink} and weapon attacks until the end of their next turn! `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeLockOn() {\n  var lockOnEffect = memmy.getEffectByName(actor, lockOn);\n\n  memmy.enableEffect(lockOnEffect);\n\n  let chatMessage = `${actor.name} locks on to the creature that attacked them, gaining advantage on attack rolls against it until the end of their next turn. The creature also gets disadvanate on saving throws against ${actor.name}'s ${archaicArtsItemLink}!' `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeThickSkin() {\n  let content = `\n    <form>\n        <div class=\"form-group\">\n            <label>Please enter the amount of damage you took</label>\n            <input id=\"damage\" type=\"number\" min=\"0\"></input>\n        </div>\n    </form>\n  `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"OK\",\n        callback: (html) => {\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            memmy.warn(\n              \"You need to provide the amount of damage you received!\"\n            );\n            return;\n          }\n\n          let maxHeal = Math.floor(damage/2);\n          let siphonerLevel = memmy.getItemByNameAndType(actor, \"Siphoner\", \"class\").data.data.levels;\n          let tempHitPoints = Math.min(siphonerLevel, maxHeal);\n          memmy.setTemporaryHitPoints(actor, tempHitPoints);\n\n          let chatMessage = `${actor.name} thickens their skin, gaining ${tempHitPoints} temporary hit points!`;\n          memmy.printChatMessage(chatMessage);\n        },\n      },\n      cancel: cancelButton,\n    },\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"On the Edge","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"On The Edge\";\nconst cancelButton = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nconst bwb = \"Better when bleeding\";\nconst bulkUp = \"Bulk Up\";\nconst intensify = \"Intensify\";\nconst lockOn = \"Lock On\";\n\nconst disabledPath = \"disabled\";\n\nconst bwbItemLink = \"@Item[L7AUdlUWMAum0zhu]{Better When Bleeding}\";\nconst archaicArtsItemLink = \"@Item[OM7SdcYcni5VIruv]{Archaic Arts}\";\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: `Please select an effect: `,\n    buttons: {\n      bulkUp: {\n        icon: \"\",\n        label: \"Bulk Up\",\n        callback: executeBulkUp,\n      },\n      intensify: {\n        icon: \"\",\n        label: \"Intensify\",\n        callback: executeIntensify,\n      },\n      lockOn: {\n        icon: \"\",\n        label: \"Lock On\",\n        callback: executeLockOn,\n      },\n      thickSkin: {\n        icon: \"\",\n        label: \"Thick Skin\",\n        callback: executeThickSkin,\n      },\n      cancel: cancelButton,\n    },\n    default: \"cancel\",\n  }).render(true);\n}\n\nfunction executeBulkUp() {\n  var betterWhenBleedingEffect = memmy.getEffectByName(actor, bwb);\n  var bulkUpEffect = memmy.getEffectByName(actor, bulkUp);\n\n  memmy.disableEffect(betterWhenBleedingEffect);\n  memmy.enableEffect(bulkUpEffect);\n\n  let chatMessage = `${actor.name} bulks up, and ignores his AC penalty from ${bwbItemLink} until the end of their next turn.`;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeIntensify() {\n  var intensifyEffect = memmy.getEffectByName(actor, intensify);\n\n  memmy.enableEffect(intensifyEffect);\n\n  let chatMessage = `${actor.name} intensifies, adding their constitution modifier to the damage rolls of their ${archaicArtsItemLink} and weapon attacks until the end of their next turn! `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeLockOn() {\n  var lockOnEffect = memmy.getEffectByName(actor, lockOn);\n\n  memmy.enableEffect(lockOnEffect);\n\n  let chatMessage = `${actor.name} locks on to the creature that attacked them, gaining advantage on attack rolls against it until the end of their next turn. The creature also gets disadvanate on saving throws against ${actor.name}'s ${archaicArtsItemLink}!' `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeThickSkin() {\n  let content = `\n    <form>\n        <div class=\"form-group\">\n            <label>Please enter the amount of damage you took</label>\n            <input id=\"damage\" type=\"number\" min=\"0\"></input>\n        </div>\n    </form>\n  `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"OK\",\n        callback: (html) => {\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            memmy.warn(\n              \"You need to provide the amount of damage you received!\"\n            );\n            return;\n          }\n\n          let maxHeal = Math.floor(damage/2);\n          let siphonerLevel = memmy.getItemByNameAndType(actor, \"Siphoner\", \"class\").data.data.levels;\n          let tempHitPoints = Math.min(siphonerLevel, maxHeal);\n          memmy.setTemporaryHitPoints(actor, tempHitPoints);\n\n          let chatMessage = `${actor.name} thickens their skin, gaining ${tempHitPoints} temporary hit points!`;\n          memmy.printChatMessage(chatMessage);\n        },\n      },\n      cancel: cancelButton,\n    },\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}}},"img":"modules/memmy/assets/icons/bulk-up.jpg","effects":[{"_id":"XPtrZWYrmG9a7Okm","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[{"key":"data.bonuses.mwak.damage","value":"@abilities.con.mod","mode":2,"priority":20},{"key":"data.bonuses.rwak.damage","value":"@abilities.con.mod","mode":2,"priority":20},{"key":"data.bonuses.archarts.damage","value":"@abilities.con.mod","mode":2,"priority":20}],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Intensify","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true},{"_id":"8S6m2kg6sAPTcP1E","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Lock On","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true},{"_id":"xETrb2VghHQk9u6m","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Bulk Up","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true}],"_id":"tLL7ZBO7W0wRwlMO"}
{"name":"Ability Score Improvement (Siphoner)","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>When you reach 4th level, and again at 8th, 12th, 16th, and 19th level, you can increase one ability score of your choice by 2, or you can increase two ability scores of you choice by 1. As normal, you can't increase an ability score above 20 using this feature. Alternatively, you can choose a feat.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 4","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/ability-score-improvement-siphoner.jpg","effects":[],"_id":"tUiCU0y3fgtVzivv"}
{"name":"Overheal","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 2nd level, you learn how not to wate excess energy. Any excess healing you subject to yourself is turned into temporary hit points equal to half of the excess.<br /><br /><em>example: You cast cure wounds on yourself and would heal 9, your current HP is 25/28. There's 6 excess healing, so you gain 3 temporary hit points</em></p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":"","actionType":"other","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 2","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":"ItemMacro"},"itemacro":{"macro":{"_data":{"name":"Overheal","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Overheal\";\n\nif (args[0].tag == \"OnUse\") {\n  let content = `\n        <form>\n            <div class=\"form-group\">\n                <label>How much did you overheal?</label>\n                <input id=\"overheal\" type=\"number\" min=\"0\"></input>\n            </div>\n        </form>\n    `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Ok\",\n        callback: (html) => {\n          let overheal = parseInt(html.find(\"[id=overheal]\")[0].value);\n          if (!overheal) {\n            ui.notifications.warn(\n              \"Please provide a valid amount of overhealed hit points!\"\n            );\n            return;\n          }\n\n          let tempHitPoints = Math.floor(overheal/2);\n          if(actor.data.data.attributes.hp.temp >= tempHitPoints)\n          {\n              ui.notifications.warn(\"You already have more temporary hit points than this ability would gain you!\");\n              return;\n          }\n\n          actor.update({\n              'data.attributes.hp.temp': tempHitPoints\n          });\n\n          let chatData = {\n              user: game.user._id,\n              content: `${actor.name} overhealed ${tempHitPoints} temporary hit points!`\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: {\n        icon: \"\",\n        label: \"Cancel\",\n      },\n    },\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"Overheal","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Overheal\";\n\nif (args[0].tag == \"OnUse\") {\n  let content = `\n        <form>\n            <div class=\"form-group\">\n                <label>How much did you overheal?</label>\n                <input id=\"overheal\" type=\"number\" min=\"0\"></input>\n            </div>\n        </form>\n    `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Ok\",\n        callback: (html) => {\n          let overheal = parseInt(html.find(\"[id=overheal]\")[0].value);\n          if (!overheal) {\n            ui.notifications.warn(\n              \"Please provide a valid amount of overhealed hit points!\"\n            );\n            return;\n          }\n\n          let tempHitPoints = Math.floor(overheal/2);\n          if(actor.data.data.attributes.hp.temp >= tempHitPoints)\n          {\n              ui.notifications.warn(\"You already have more temporary hit points than this ability would gain you!\");\n              return;\n          }\n\n          actor.update({\n              'data.attributes.hp.temp': tempHitPoints\n          });\n\n          let chatData = {\n              user: game.user._id,\n              content: `${actor.name} overhealed ${tempHitPoints} temporary hit points!`\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: {\n        icon: \"\",\n        label: \"Cancel\",\n      },\n    },\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}}},"img":"modules/memmy/assets/icons/overheal.png","effects":[],"_id":"zd30onATFwn19n3l"}
{"$$deleted":true,"_id":"tUiCU0y3fgtVzivv"}
{"$$deleted":true,"_id":"T2HOBKDuj6VChjXL"}
{"$$deleted":true,"_id":"baQR75VcceFaPwGd"}
{"$$deleted":true,"_id":"kBqEtxMskHehmjJ8"}
{"$$deleted":true,"_id":"iNaNLLEP3YHtr8Nf"}
{"$$deleted":true,"_id":"XRcb4OivKBVzzwlV"}
{"$$deleted":true,"_id":"kYpqk3cq4QZNsN7L"}
{"$$deleted":true,"_id":"zd30onATFwn19n3l"}
{"$$deleted":true,"_id":"cGPgVyVV6UsPExpg"}
{"$$deleted":true,"_id":"qrkGKYR5PPyNhFfS"}
{"$$deleted":true,"_id":"53CYoJMUuzMSJBkm"}
{"$$deleted":true,"_id":"tLL7ZBO7W0wRwlMO"}
{"name":"Stolen Vitality","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 3rd level, you are immune to effects that magically age you such as a ghosts horrifyin visage, as&nbsp; you have further learned how to sustain your own life energy.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 3","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/stolen-vitality.jpg","effects":[],"_id":"H9e3VQ9OA1T0Ykv7"}
{"name":"Spellcasting (Siphoner)","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<h3>Preparing and Casting Spells</h3>\n<p>The Siphoner table shows how many spell slots you have to cast your spells. To cast one of your Siphoner spells of 1st level or higher, you must expend of the spell's level or higher. You regain all expended spell slots when you finish a long rest.</p>\n<p>You prepare the list of Siphoner spells that are available for you to cast, choosing from the Siphoner spell list. When you do so, choose a number of Siphoner spells equal to your Intelligence modifier + half your Siphoner level, rounded down (minimum of one spell). Tje spells must be of a level for which you have spell slots. You can change your list of prepared spells when you finish a long rest.</p>\n<p>&nbsp;</p>\n<h3>Spellcasting ability</h3>\n<p>Intelligence is your spellcasting ability for your Siphoner spells. You use your Intelligence whenever a spell refers to your spellcasting ability. In addition, you use your Intelligence modifier when setting the saving throw DC for a Siphoner spell you cast and when making an attack roll with one.</p>\n<p>&nbsp;</p>\n<p style=\"text-align: center;\"><strong>Spell save DC&nbsp;</strong>= 8 + your proficiency bonus + your Intelligence modifier</p>\n<p style=\"text-align: center;\"><strong>Spell attack modifier</strong> = your proficiency bonus + your Intelligence modifier</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<h3 style=\"text-align: left;\">Spellcasting focus</h3>\n<p>You may use any arcane focus as a spellcasting focus for your Siphoner spells.</p>\n<p>&nbsp;</p>\n<h3>Spell List</h3>\n<p><strong>1st Level</strong></p>\n<ul>\n<li>Absorb Elements</li>\n<li>Armor of Agathys</li>\n<li>Bane</li>\n<li>Cause Fear</li>\n<li>Cure Wounds</li>\n<li>Detect Magic</li>\n<li>False Life</li>\n<li>Hex</li>\n<li>Longstrider</li>\n<li>Inflict Wounds</li>\n<li>Magic Missile</li>\n<li>Ray of Sickness</li>\n<li>Sleep</li>\n<li>Tasha's Caustic Brew</li>\n</ul>\n<p><strong>2nd Level</strong></p>\n<ul>\n<li>Aid</li>\n<li>Darkness</li>\n<li>Earhbind</li>\n<li>Enthrall</li>\n<li>Gentle Repose</li>\n<li>Healing Spirit</li>\n<li>Lesser Restoration</li>\n<li>Misty Step</li>\n<li>Shadow Blade</li>\n<li>Spider Climb</li>\n</ul>\n<p><strong>3rd Level</strong></p>\n<ul>\n<li>Aura of Vitality</li>\n<li>Bestow Curse</li>\n<li>Counterspell</li>\n<li>Feign Death</li>\n<li>Gaseous Form</li>\n<li>Hunger of Hadar</li>\n<li>Life Transference</li>\n<li>Slow</li>\n<li>Vampiric Touch</li>\n</ul>\n<p><strong>4th Level</strong></p>\n<ul>\n<li>Auro of Life</li>\n<li>Banishment</li>\n<li>Blight</li>\n<li>Death Ward</li>\n<li>Freedom of Movement</li>\n<li>Shadow of Moil</li>\n<li>Sickening Radiance</li>\n<li>Stoneskin</li>\n<li>Vitriolic Sphere</li>\n</ul>\n<p><strong>5th Level</strong></p>\n<ul>\n<li>Animate Objects</li>\n<li>Antilife Shell</li>\n<li>Enervation</li>\n<li>Fat Step</li>\n<li>Greater Restoration</li>\n<li>Passwall</li>\n<li>Steel Wind Strike</li>\n<li>Synaptic Static</li>\n<li>Wall of Force</li>\n</ul>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 2","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/spellcasting-siphoner.jpg","effects":[],"_id":"VVqDYObLIYhp8AIP"}
{"name":"Quickened Arts","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 11th level, you have achieved a signature art that is second nature to you. Choose one Archaic Art you know that has a usage time of 1 action, you can now use it as a bonus action. You can change your signature art upon finishing a long rest.</p>\n<p>If you do not know an Archaic Art with a usage time of 1 action, you may instead choose a third level or lower Siphoner spell that resotres hit points with a cast time of 1 action. You may now cast it as a bonus action.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 11","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/quickened-arts.jpg","effects":[],"_id":"B05hQspWJzQ8xD2O"}
{"name":"Overheal","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 2nd level, you learn how not to wate excess energy. Any excess healing you subject to yourself is turned into temporary hit points equal to half of the excess.<br /><br /><em>example: You cast cure wounds on yourself and would heal 9, your current HP is 25/28. There's 6 excess healing, so you gain 3 temporary hit points</em></p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":"","actionType":"other","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 2","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":"ItemMacro"},"itemacro":{"macro":{"_data":{"name":"Overheal","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Overheal\";\n\nif (args[0].tag == \"OnUse\") {\n  let content = `\n        <form>\n            <div class=\"form-group\">\n                <label>How much did you overheal?</label>\n                <input id=\"overheal\" type=\"number\" min=\"0\"></input>\n            </div>\n        </form>\n    `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Ok\",\n        callback: (html) => {\n          let overheal = parseInt(html.find(\"[id=overheal]\")[0].value);\n          if (!overheal) {\n            ui.notifications.warn(\n              \"Please provide a valid amount of overhealed hit points!\"\n            );\n            return;\n          }\n\n          let tempHitPoints = Math.floor(overheal/2);\n          if(actor.data.data.attributes.hp.temp >= tempHitPoints)\n          {\n              ui.notifications.warn(\"You already have more temporary hit points than this ability would gain you!\");\n              return;\n          }\n\n          actor.update({\n              'data.attributes.hp.temp': tempHitPoints\n          });\n\n          let chatData = {\n              user: game.user._id,\n              content: `${actor.name} overhealed ${tempHitPoints} temporary hit points!`\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: {\n        icon: \"\",\n        label: \"Cancel\",\n      },\n    },\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"Overheal","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Overheal\";\n\nif (args[0].tag == \"OnUse\") {\n  let content = `\n        <form>\n            <div class=\"form-group\">\n                <label>How much did you overheal?</label>\n                <input id=\"overheal\" type=\"number\" min=\"0\"></input>\n            </div>\n        </form>\n    `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Ok\",\n        callback: (html) => {\n          let overheal = parseInt(html.find(\"[id=overheal]\")[0].value);\n          if (!overheal) {\n            ui.notifications.warn(\n              \"Please provide a valid amount of overhealed hit points!\"\n            );\n            return;\n          }\n\n          let tempHitPoints = Math.floor(overheal/2);\n          if(actor.data.data.attributes.hp.temp >= tempHitPoints)\n          {\n              ui.notifications.warn(\"You already have more temporary hit points than this ability would gain you!\");\n              return;\n          }\n\n          actor.update({\n              'data.attributes.hp.temp': tempHitPoints\n          });\n\n          let chatData = {\n              user: game.user._id,\n              content: `${actor.name} overhealed ${tempHitPoints} temporary hit points!`\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: {\n        icon: \"\",\n        label: \"Cancel\",\n      },\n    },\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}}},"img":"modules/memmy/assets/icons/overheal.png","effects":[],"_id":"suFSG3ayVpRBT7Ux"}
{"name":"On the Edge","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 10th level, your soul rejects the dangerous effects of magic. When you are subjected to an effect that allows you to make a saving throw to either avoid or take half-damage on a succesful save (Such as the fireball spell or a dragons breath weapon) you may choose to automatically fail it. If you do so, you may choose one of the following benefits:</p>\n<ul>\n<li><strong>Bulk up:</strong> Your @Item[L7AUdlUWMAum0zhu]{Better When Bleeding} AC penalty no longer applies until the end of your next turn.</li>\n<li><strong>Intensify:</strong> You add your Constitution modifier to the damage rolls of your Archaic Arts and Weapon attacks until the end of your next turn.</li>\n<li><strong>Lock On:</strong> You have advantage on attack rolls against the creature who forced you to make the save until the end of your next turn, additionally they have disadvantage on saving throws against your Archaic Arts.</li>\n<li><strong>Thick Skin:</strong> You gain temporary hit points equal to your Siphoner level (Maximum of half the damage taken from the trigger of this feature)</li>\n</ul>\n<p>You may use this feature a number of times equal to your intelligence modifier (Minimum of 1).</p>\n<p>You regain all uses upon finishing a long rest.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"none","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"@abilities.int.mod","per":"lr"},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"other","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 10","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":"ItemMacro"},"itemacro":{"macro":{"_data":{"name":"On the Edge","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"On The Edge\";\nconst cancelButton = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nconst bwb = \"Better when bleeding\";\nconst bulkUp = \"Bulk Up\";\nconst intensify = \"Intensify\";\nconst lockOn = \"Lock On\";\n\nconst disabledPath = \"disabled\";\n\nconst bwbItemLink = \"@Item[L7AUdlUWMAum0zhu]{Better When Bleeding}\";\nconst archaicArtsItemLink = \"@Item[OM7SdcYcni5VIruv]{Archaic Arts}\";\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: `Please select an effect: `,\n    buttons: {\n      bulkUp: {\n        icon: \"\",\n        label: \"Bulk Up\",\n        callback: executeBulkUp,\n      },\n      intensify: {\n        icon: \"\",\n        label: \"Intensify\",\n        callback: executeIntensify,\n      },\n      lockOn: {\n        icon: \"\",\n        label: \"Lock On\",\n        callback: executeLockOn,\n      },\n      thickSkin: {\n        icon: \"\",\n        label: \"Thick Skin\",\n        callback: executeThickSkin,\n      },\n      cancel: cancelButton,\n    },\n    default: \"cancel\",\n  }).render(true);\n}\n\nfunction executeBulkUp() {\n  var betterWhenBleedingEffect = memmy.getEffectByName(actor, bwb);\n  var bulkUpEffect = memmy.getEffectByName(actor, bulkUp);\n\n  memmy.disableEffect(betterWhenBleedingEffect);\n  memmy.enableEffect(bulkUpEffect);\n\n  let chatMessage = `${actor.name} bulks up, and ignores his AC penalty from ${bwbItemLink} until the end of their next turn.`;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeIntensify() {\n  var intensifyEffect = memmy.getEffectByName(actor, intensify);\n\n  memmy.enableEffect(intensifyEffect);\n\n  let chatMessage = `${actor.name} intensifies, adding their constitution modifier to the damage rolls of their ${archaicArtsItemLink} and weapon attacks until the end of their next turn! `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeLockOn() {\n  var lockOnEffect = memmy.getEffectByName(actor, lockOn);\n\n  memmy.enableEffect(lockOnEffect);\n\n  let chatMessage = `${actor.name} locks on to the creature that attacked them, gaining advantage on attack rolls against it until the end of their next turn. The creature also gets disadvanate on saving throws against ${actor.name}'s ${archaicArtsItemLink}!' `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeThickSkin() {\n  let content = `\n    <form>\n        <div class=\"form-group\">\n            <label>Please enter the amount of damage you took</label>\n            <input id=\"damage\" type=\"number\" min=\"0\"></input>\n        </div>\n    </form>\n  `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"OK\",\n        callback: (html) => {\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            memmy.warn(\n              \"You need to provide the amount of damage you received!\"\n            );\n            return;\n          }\n\n          let maxHeal = Math.floor(damage/2);\n          let siphonerLevel = memmy.getItemByNameAndType(actor, \"Siphoner\", \"class\").data.data.levels;\n          let tempHitPoints = Math.min(siphonerLevel, maxHeal);\n          memmy.setTemporaryHitPoints(actor, tempHitPoints);\n\n          let chatMessage = `${actor.name} thickens their skin, gaining ${tempHitPoints} temporary hit points!`;\n          memmy.printChatMessage(chatMessage);\n        },\n      },\n      cancel: cancelButton,\n    },\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"On the Edge","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"On The Edge\";\nconst cancelButton = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nconst bwb = \"Better when bleeding\";\nconst bulkUp = \"Bulk Up\";\nconst intensify = \"Intensify\";\nconst lockOn = \"Lock On\";\n\nconst disabledPath = \"disabled\";\n\nconst bwbItemLink = \"@Item[L7AUdlUWMAum0zhu]{Better When Bleeding}\";\nconst archaicArtsItemLink = \"@Item[OM7SdcYcni5VIruv]{Archaic Arts}\";\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: `Please select an effect: `,\n    buttons: {\n      bulkUp: {\n        icon: \"\",\n        label: \"Bulk Up\",\n        callback: executeBulkUp,\n      },\n      intensify: {\n        icon: \"\",\n        label: \"Intensify\",\n        callback: executeIntensify,\n      },\n      lockOn: {\n        icon: \"\",\n        label: \"Lock On\",\n        callback: executeLockOn,\n      },\n      thickSkin: {\n        icon: \"\",\n        label: \"Thick Skin\",\n        callback: executeThickSkin,\n      },\n      cancel: cancelButton,\n    },\n    default: \"cancel\",\n  }).render(true);\n}\n\nfunction executeBulkUp() {\n  var betterWhenBleedingEffect = memmy.getEffectByName(actor, bwb);\n  var bulkUpEffect = memmy.getEffectByName(actor, bulkUp);\n\n  memmy.disableEffect(betterWhenBleedingEffect);\n  memmy.enableEffect(bulkUpEffect);\n\n  let chatMessage = `${actor.name} bulks up, and ignores his AC penalty from ${bwbItemLink} until the end of their next turn.`;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeIntensify() {\n  var intensifyEffect = memmy.getEffectByName(actor, intensify);\n\n  memmy.enableEffect(intensifyEffect);\n\n  let chatMessage = `${actor.name} intensifies, adding their constitution modifier to the damage rolls of their ${archaicArtsItemLink} and weapon attacks until the end of their next turn! `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeLockOn() {\n  var lockOnEffect = memmy.getEffectByName(actor, lockOn);\n\n  memmy.enableEffect(lockOnEffect);\n\n  let chatMessage = `${actor.name} locks on to the creature that attacked them, gaining advantage on attack rolls against it until the end of their next turn. The creature also gets disadvanate on saving throws against ${actor.name}'s ${archaicArtsItemLink}!' `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeThickSkin() {\n  let content = `\n    <form>\n        <div class=\"form-group\">\n            <label>Please enter the amount of damage you took</label>\n            <input id=\"damage\" type=\"number\" min=\"0\"></input>\n        </div>\n    </form>\n  `;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"OK\",\n        callback: (html) => {\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            memmy.warn(\n              \"You need to provide the amount of damage you received!\"\n            );\n            return;\n          }\n\n          let maxHeal = Math.floor(damage/2);\n          let siphonerLevel = memmy.getItemByNameAndType(actor, \"Siphoner\", \"class\").data.data.levels;\n          let tempHitPoints = Math.min(siphonerLevel, maxHeal);\n          memmy.setTemporaryHitPoints(actor, tempHitPoints);\n\n          let chatMessage = `${actor.name} thickens their skin, gaining ${tempHitPoints} temporary hit points!`;\n          memmy.printChatMessage(chatMessage);\n        },\n      },\n      cancel: cancelButton,\n    },\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}}},"img":"modules/memmy/assets/icons/bulk-up.jpg","effects":[{"_id":"XPtrZWYrmG9a7Okm","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[{"key":"data.bonuses.mwak.damage","value":"@abilities.con.mod","mode":2,"priority":20},{"key":"data.bonuses.rwak.damage","value":"@abilities.con.mod","mode":2,"priority":20},{"key":"data.bonuses.archarts.damage","value":"@abilities.con.mod","mode":2,"priority":20}],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Intensify","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true},{"_id":"8S6m2kg6sAPTcP1E","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Lock On","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true},{"_id":"xETrb2VghHQk9u6m","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Bulk Up","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true}],"_id":"h4Nk1Wrj2aRIPPy3"}
{"name":"Infused Flesh","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 6th level, you know how to turn your magic into raw might. As a bonus action you may expend one of your available spell slots, you gain temporary hit points equal to 5 times the spells level. These hit points are added on to any hit points you already currently have.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"bonus","cost":1,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":"0","per":""},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"other","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 6","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":"ItemMacro"},"itemacro":{"macro":{"_data":{"name":"Infused Flesh","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Infused Flesh\";\n\nif (args[0].tag == \"OnUse\") {\n  let slotsData = memmy.getAllSpellSlots(actor);\n  if (slotsData.total <= 0) {\n    ui.notifications.warn(\"You have no spell slots available for this feature!\");\n    return;\n  }\n\n  let spellSlotsHtml = ``;\n\n  for (let slot of spellSlots.slots) {\n    if (slot.available > 0) {\n      spellSlotsHtml += `<option value=\"${slot.id}\">${slot.displayName} (${slot.available})</option>`;\n    }\n  }\n\n  let content = `\n    <p> Please select the spell slot to use for this ability.\n    <form>\n        <div class=\"form-group\">\n            <select id=\"spellSlot\">\n                ${spellSlotsHtml}\n            </select>\n        </div>\n    </form>\n  `;\n\n  let buttons = {\n    ok: {\n      icon: \"\",\n      label: \"Ok\",\n      callback: (html) => {\n        let slotId = html.find(\"[id=spellSlot]\")[0].value;\n        let slot = slotsData.slots.find((s) => s.id == slotId);\n\n        var tempHP = actor.data.data.attributes.hp.temp;\n        var extraTempHP = 5 * slot.level;\n        var spellSlotPath = `data.spells.${slotId}.value`;\n\n        let updateData = {\n          \"data.attributes.hp.temp\": tempHP + extraTempHP,\n        };\n        updateData[spellSlotPath] = slot.available - 1;\n\n        actor.update(updateData);\n      },\n    },\n    cancel: {\n      icon: \"\",\n      label: \"Cancel\",\n    },\n  };\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: buttons,\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"Infused Flesh","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Infused Flesh\";\n\nif (args[0].tag == \"OnUse\") {\n  let slotsData = memmy.getAllSpellSlots(actor);\n  if (slotsData.total <= 0) {\n    ui.notifications.warn(\"You have no spell slots available for this feature!\");\n    return;\n  }\n\n  let spellSlotsHtml = ``;\n\n  for (let slot of spellSlots.slots) {\n    if (slot.available > 0) {\n      spellSlotsHtml += `<option value=\"${slot.id}\">${slot.displayName} (${slot.available})</option>`;\n    }\n  }\n\n  let content = `\n    <p> Please select the spell slot to use for this ability.\n    <form>\n        <div class=\"form-group\">\n            <select id=\"spellSlot\">\n                ${spellSlotsHtml}\n            </select>\n        </div>\n    </form>\n  `;\n\n  let buttons = {\n    ok: {\n      icon: \"\",\n      label: \"Ok\",\n      callback: (html) => {\n        let slotId = html.find(\"[id=spellSlot]\")[0].value;\n        let slot = slotsData.slots.find((s) => s.id == slotId);\n\n        var tempHP = actor.data.data.attributes.hp.temp;\n        var extraTempHP = 5 * slot.level;\n        var spellSlotPath = `data.spells.${slotId}.value`;\n\n        let updateData = {\n          \"data.attributes.hp.temp\": tempHP + extraTempHP,\n        };\n        updateData[spellSlotPath] = slot.available - 1;\n\n        actor.update(updateData);\n      },\n    },\n    cancel: {\n      icon: \"\",\n      label: \"Cancel\",\n    },\n  };\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: buttons,\n    default: \"ok\",\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}}},"img":"modules/memmy/assets/icons/infused-flesh.jpg","effects":[],"_id":"3FEAK7EKe5MQXwro"}
{"name":"Energy Drain","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 1st level, you have begun to dabble into learning how to siphon energy. Whenever you deal damage with a weapon attack to a living creature or a creature with a soul, you may choose to drain energy from them.</p>\n<p>Roll one of your available hit dice (If you have any, if not you can not activate this feature). You may recover a number of hit points equal to the hit die roll (This recovered HP can be no greater than the damage dealt with the weapon attack).</p>\n<p>Additionally, upon reducing a hostile creature to 0 HP, you regain one expended hit die up to your maximum.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"none","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":"0","per":""},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"other","attackBonus":"0","chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 1","recharge":{"value":null,"charged":false}},"flags":{"core":{"sourceId":"Item.bwJsy5hNjTXSFRQg"},"itemacro":{"macro":{"_data":{"name":"Energy Drain","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Energy Drain\";\nconst cancel = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: \"\",\n    buttons: {\n      heal: {\n        icon: \"\",\n        label: \"Heal\",\n        callback: () => heal(),\n      },\n      regain: {\n        icon: \"\",\n        label: \"Regain Hit Die\",\n        callback: () => regainHitDie(),\n      },\n      cancel: cancel,\n    },\n    default: \"heal\",\n  }).render(true);\n}\n\nfunction heal() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n  // Check Available Dice\n  if (diceData.available == 0) {\n    ui.notifications.warn(\"You need to have at least one remaining hit die to activate Energy Drain!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to roll:\", diceData.dice);\n\n  let content = `\n     <p>Please select the hit die to use for this ability.</p>\n     <form>\n      ${hitDieHtml}\n      <div class=\"form-group\">\n       <label>Enter the damage from your attack</label>\n       <input id=\"damage\" type=\"text\" inputmode=\"numeric\"></input>\n      </div>\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Roll\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            ui.notifications.warn(\"You need to provide the amount of damage dealt by your attack!\");\n            return;\n          }\n          executeHeal(die, damage);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction executeHeal(die, maxHeal) {\n  let source = die.source;\n\n  // update count\n  if (source.type === \"class\")\n    source.update({\n      \"data.hitDiceUsed\": dice.used + 1,\n    });\n  else {\n    source.update({\n      \"data.uses.value\": dice.available - 1,\n    });\n  }\n\n  let maxHP = actor.data.data.attributes.hp.max;\n  let currentHP = actor.data.data.attributes.hp.value;\n  let missingHP = maxHP - currentHP;\n\n  // roll healing\n  let hp = new Roll(die.size).roll().total;\n\n  let toHeal = Math.min(hp, maxHeal, missingHP);\n  currentHP += toHeal;\n  let text;\n\n  if (maxHeal > missingHP && hp > missingHP) {\n    // user overheals and should be limited\n    let overheal = hp - missingHP;\n    text = `${actor.name} healed ${toHeal}, and restored himself to full hp! (overhealed ${overheal} hp)`;\n  } else if (hp > maxHeal) {\n    // user heals to much, and should be limited to maxheal value\n    text = `${actor.name} healed ${toHeal}! (limited to damage dealt)`;\n  } else {\n    // user heals hp\n    text = `${actor.name} healed ${toHeal}!`;\n  }\n\n  // Heal player\n  actor.update({ \"data.attributes.hp.value\": currentHP });\n\n  // Create chat message\n  let chatData = {\n    user: game.user._id,\n    content: text,\n  };\n\n  ChatMessage.create(chatData, {});\n\n  return;\n}\n\nfunction regainHitDie() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n\n  if (diceData.expended === 0) {\n    ui.notifications.warn(\"You already have the max amount of available hit die!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to regain:\", diceData);\n\n  let content = `\n     <p>Please select the hit die to regain.</p>\n     <form>\n      ${hitDieHtml}\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Regain\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let source = die.source;\n\n          // update count\n          if (source.type === \"class\")\n            source.update({\n              \"data.hitDiceUsed\": dice.used - 1,\n            });\n          else {\n            source.update({\n              \"data.uses.value\": dice.available + 1,\n            });\n          }\n\n          let chatData = {\n            user: game.user._id,\n            content: `${actor.name} drains the killed enemy and regains 1 hit die (${size}).`,\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction getHitDieSelectionHtml(text, dice) {\n  let options = \"\";\n  for (let die in dice) {\n    options += `<option value=\"${die}\">${die.displayName}</option>`;\n  }\n\n  let html = `\n        <div class=\"form-group\">\n         <label>${text}</label>\n         <select id=\"die\">${options}</select>\n        </div>\n    `;\n\n  return html;\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"Energy Drain","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"Energy Drain\";\nconst cancel = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nif (args[0].tag === \"OnUse\") {\n  new Dialog({\n    title: title,\n    content: \"\",\n    buttons: {\n      heal: {\n        icon: \"\",\n        label: \"Heal\",\n        callback: () => heal(),\n      },\n      regain: {\n        icon: \"\",\n        label: \"Regain Hit Die\",\n        callback: () => regainHitDie(),\n      },\n      cancel: cancel,\n    },\n    default: \"heal\",\n  }).render(true);\n}\n\nfunction heal() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n  // Check Available Dice\n  if (diceData.available == 0) {\n    ui.notifications.warn(\"You need to have at least one remaining hit die to activate Energy Drain!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to roll:\", diceData.dice);\n\n  let content = `\n     <p>Please select the hit die to use for this ability.</p>\n     <form>\n      ${hitDieHtml}\n      <div class=\"form-group\">\n       <label>Enter the damage from your attack</label>\n       <input id=\"damage\" type=\"text\" inputmode=\"numeric\"></input>\n      </div>\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Roll\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n          if (!damage) {\n            ui.notifications.warn(\"You need to provide the amount of damage dealt by your attack!\");\n            return;\n          }\n          executeHeal(die, damage);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction executeHeal(die, maxHeal) {\n  let source = die.source;\n\n  // update count\n  if (source.type === \"class\")\n    source.update({\n      \"data.hitDiceUsed\": dice.used + 1,\n    });\n  else {\n    source.update({\n      \"data.uses.value\": dice.available - 1,\n    });\n  }\n\n  let maxHP = actor.data.data.attributes.hp.max;\n  let currentHP = actor.data.data.attributes.hp.value;\n  let missingHP = maxHP - currentHP;\n\n  // roll healing\n  let hp = new Roll(die.size).roll().total;\n\n  let toHeal = Math.min(hp, maxHeal, missingHP);\n  currentHP += toHeal;\n  let text;\n\n  if (maxHeal > missingHP && hp > missingHP) {\n    // user overheals and should be limited\n    let overheal = hp - missingHP;\n    text = `${actor.name} healed ${toHeal}, and restored himself to full hp! (overhealed ${overheal} hp)`;\n  } else if (hp > maxHeal) {\n    // user heals to much, and should be limited to maxheal value\n    text = `${actor.name} healed ${toHeal}! (limited to damage dealt)`;\n  } else {\n    // user heals hp\n    text = `${actor.name} healed ${toHeal}!`;\n  }\n\n  // Heal player\n  actor.update({ \"data.attributes.hp.value\": currentHP });\n\n  // Create chat message\n  let chatData = {\n    user: game.user._id,\n    content: text,\n  };\n\n  ChatMessage.create(chatData, {});\n\n  return;\n}\n\nfunction regainHitDie() {\n  let diceData = memmy.getAllHitDiceForSiphonerFeature(actor);\n\n  if (diceData.expended === 0) {\n    ui.notifications.warn(\"You already have the max amount of available hit die!\");\n    return;\n  }\n\n  let hitDieHtml = getHitDieSelectionHtml(\"Select hit die to regain:\", diceData);\n\n  let content = `\n     <p>Please select the hit die to regain.</p>\n     <form>\n      ${hitDieHtml}\n     <form>`;\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: {\n        icon: \"\",\n        label: \"Regain\",\n        callback: (html) => {\n          let die = html.find(\"[id=die]\")[0].value;\n          let source = die.source;\n\n          // update count\n          if (source.type === \"class\")\n            source.update({\n              \"data.hitDiceUsed\": dice.used - 1,\n            });\n          else {\n            source.update({\n              \"data.uses.value\": dice.available + 1,\n            });\n          }\n\n          let chatData = {\n            user: game.user._id,\n            content: `${actor.name} drains the killed enemy and regains 1 hit die (${size}).`,\n          };\n          let chatOptions = {};\n          ChatMessage.create(chatData, chatOptions);\n        },\n      },\n      cancel: cancel,\n    },\n    default: \"ok\",\n  }).render(true);\n}\n\nfunction getHitDieSelectionHtml(text, dice) {\n  let options = \"\";\n  for (let die in dice) {\n    options += `<option value=\"${die}\">${die.displayName}</option>`;\n  }\n\n  let html = `\n        <div class=\"form-group\">\n         <label>${text}</label>\n         <select id=\"die\">${options}</select>\n        </div>\n    `;\n\n  return html;\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}},"midi-qol":{"onUseMacroName":"ItemMacro"},"favtab":{"isFavorite":true,"sort":null}},"img":"modules/memmy/assets/icons/energy-drain.webp","effects":[],"_id":"6ZbIA6Mee9shFT21"}
{"name":"Beyond Mortality","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 20th level, you have glimpsed between life and death and now exist beyond both. You stop aging and can no longer die of old age.</p>\n<p>Additionally, you gain 10 bonus hit die for the purpose of fueling your class features and Archaic Arts. You do not gain additional maximum HP from these hit die, and you regain all of them upon finishing a long rest.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"none","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":10,"max":"10","per":"lr"},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 20","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":""}},"img":"modules/memmy/assets/icons/beyond-mortality.jpg","effects":[],"_id":"AurtkZ2EzAUDvG1t"}
{"name":"Better When Bleeding","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 1st level, you know that it's better to take hits than attempt to nullify them.</p>\n<p>Your AC now takes a penalty equal to your Constitution Modifier (Minimum of 1) additionally, your maximum HP increases by your Constitution Modifier x your current Siphoner level.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 1","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/better-when-bleeding.webp","effects":[{"_id":"Rn8OStWdMXrJmVqs","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[{"key":"data.attributes.ac.value","value":"- max(1, @abilities.con.mod)","mode":2,"priority":20},{"key":"data.attributes.hp.max","value":"@classes.siphoner.levels * @abilities.con.mod","mode":2,"priority":20}],"disabled":false,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/better-when-bleeding.webp","label":"Better when bleeding","origin":"Item.L7AUdlUWMAum0zhu","tint":"","transfer":true}],"_id":"TWOJ4PVZp8BwDYhq"}
{"name":"Better When Bleeding","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Beginning at 1st level, you know that it's better to take hits than attempt to nullify them.</p>\n<p>Your AC now takes a penalty equal to your Constitution Modifier (Minimum of 1) additionally, your maximum HP increases by your Constitution Modifier x your current Siphoner level.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 1","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/better-when-bleeding.webp","effects":[{"_id":"Rn8OStWdMXrJmVqs","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[{"key":"data.attributes.ac.value","value":"- max(1, @abilities.con.mod)","mode":2,"priority":20},{"key":"data.attributes.hp.max","value":"@classes.siphoner.levels * @abilities.con.mod","mode":2,"priority":20}],"disabled":false,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/better-when-bleeding.webp","label":"Better when bleeding","origin":"Item.L7AUdlUWMAum0zhu","tint":"","transfer":true}],"_id":"R4sGi7exzruqFh4A"}
{"$$deleted":true,"_id":"R4sGi7exzruqFh4A"}
{"name":"Archaic Arts","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>At second level, you begin to unlock the secrets of Archaic Arts. Archaic arts are special techniques that bestow a variety of benefits upon you, whether those bonuses be passives like resistances, or active abilities like new action options.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 2","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/archaic-arts.jpg","effects":[],"_id":"yoSRHlix6VS44A8x"}
{"name":"Arcana Conversion","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 15th level, you can turn your siphoned energy into more than just HP. Whenever a Siphoner class feature or spell allows you to regain hit points, you can instead regain a spell slot with a level no greater than one fifth of the total hit points that would've been regained. (Rounded down)</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 15","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/arcana-conversion.jpg","effects":[],"_id":"jKeYhlodyVyaCYDe"}
{"name":"Ability Score Improvement (Siphoner)","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>When you reach 4th level, and again at 8th, 12th, 16th, and 19th level, you can increase one ability score of your choice by 2, or you can increase two ability scores of you choice by 1. As normal, you can't increase an ability score above 20 using this feature. Alternatively, you can choose a feat.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 4","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/ability-score-improvement-siphoner.jpg","effects":[],"_id":"Rtajb7npkVFWgLMd"}
{"_id":"jKeYhlodyVyaCYDe","name":"Arcana Conversion","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 15th level, you can turn your siphoned energy into more than just HP. Whenever a Siphoner class feature or spell allows you to regain hit points, you can instead regain a spell slot with a level no greater than one fifth of the total hit points that would've been regained. (Rounded down)</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":0,"max":0,"per":null},"consume":{"type":"","target":null,"amount":null},"ability":null,"actionType":"","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 15","recharge":{"value":null,"charged":false}},"flags":{},"img":"modules/memmy/assets/icons/arcana-conversion.jpg","effects":[]}
{"$$deleted":true,"_id":"h4Nk1Wrj2aRIPPy3"}
{"name":"On the Edge","permission":{"default":0,"V6xxeiXU05Zy6pPy":3},"type":"feat","data":{"description":{"value":"<p>Starting at 10th level, your soul rejects the dangerous effects of magic. When you are subjected to an effect that allows you to make a saving throw to either avoid or take half-damage on a succesful save (Such as the fireball spell or a dragons breath weapon) you may choose to automatically fail it. If you do so, you may choose one of the following benefits:</p>\n<ul>\n<li><strong>Bulk up:</strong> Your @Item[L7AUdlUWMAum0zhu]{Better When Bleeding} AC penalty no longer applies until the end of your next turn.</li>\n<li><strong>Intensify:</strong> You add your Constitution modifier to the damage rolls of your Archaic Arts and Weapon attacks until the end of your next turn.</li>\n<li><strong>Lock On:</strong> You have advantage on attack rolls against the creature who forced you to make the save until the end of your next turn, additionally they have disadvantage on saving throws against your Archaic Arts.</li>\n<li><strong>Thick Skin:</strong> You gain temporary hit points equal to your Siphoner level (Maximum of half the damage taken from the trigger of this feature)</li>\n</ul>\n<p>You may use this feature a number of times equal to your intelligence modifier (Minimum of 1).</p>\n<p>You regain all uses upon finishing a long rest.</p>","chat":"","unidentified":""},"source":"Siphoner","activation":{"type":"none","cost":0,"condition":""},"duration":{"value":null,"units":""},"target":{"value":null,"width":null,"units":"","type":""},"range":{"value":null,"long":null,"units":""},"uses":{"value":null,"max":"@abilities.int.mod","per":"lr"},"consume":{"type":"","target":"","amount":null},"ability":"","actionType":"other","attackBonus":0,"chatFlavor":"","critical":null,"damage":{"parts":[],"versatile":""},"formula":"","save":{"ability":"","dc":null,"scaling":"spell"},"requirements":"Siphoner 10","recharge":{"value":null,"charged":false}},"flags":{"midi-qol":{"onUseMacroName":"ItemMacro"},"itemacro":{"macro":{"_data":{"name":"On the Edge","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"On The Edge\";\nconst cancelButton = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nconst bwb = memmy.names.features.betterWhenBleeding;\nconst bulkUp = memmy.names.features.bulkUp;\nconst intensify = memmy.names.features.intensify;\nconst lockOn = memmy.names.features.lockOn;\n\nconst bwbItemLink = \"@Item[L7AUdlUWMAum0zhu]{Better When Bleeding}\";\nconst archaicArtsItemLink = \"@Item[OM7SdcYcni5VIruv]{Archaic Arts}\";\n\nif (args[0].tag === \"OnUse\") {\n  // get bulk up button\n  let bulkUpButton = {\n    icon: \"\",\n    label: \"Bulk Up\",\n    callback: executeBulkUp,\n  };\n\n  // get intensify button\n  let intensifyButton = {\n    icon: \"\",\n    label: \"Intensify\",\n    callback: executeIntensify,\n  };\n\n  // get lock on button\n  let lockOnButton = {\n    icon: \"\",\n    label: \"Intensify\",\n    callback: executeIntensify,\n  };\n\n  // get thick skin button\n  let thickSkinButton = {\n    icon: \"\",\n    label: \"Thick Skin\",\n    callback: executeThickSkin,\n  };\n\n  // render dialog\n  new Dialog({\n    title: title,\n    content: `Please select an effect: `,\n    buttons: {\n      bulkUp: bulkUpButton,\n      intensify: intensifyButton,\n      lockOn: lockOnButton,\n      thickSkin: thickSkinButton,\n      cancel: cancelButton,\n    },\n    default: \"cancel\",\n  }).render(true);\n}\n\nfunction executeBulkUp() {\n  var betterWhenBleedingEffect = memmy.getEffectByName(actor, bwb);\n  var bulkUpEffect = memmy.getEffectByName(actor, bulkUp);\n\n  memmy.disableEffect(betterWhenBleedingEffect);\n  memmy.enableEffect(bulkUpEffect);\n\n  let chatMessage = `${actor.name} bulks up, and ignores his AC penalty from ${bwbItemLink} until the end of their next turn.`;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeIntensify() {\n  var intensifyEffect = memmy.getEffectByName(actor, intensify);\n\n  memmy.enableEffect(intensifyEffect);\n\n  let chatMessage = `${actor.name} intensifies, adding their constitution modifier to the damage rolls of their ${archaicArtsItemLink} and weapon attacks until the end of their next turn! `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeLockOn() {\n  var lockOnEffect = memmy.getEffectByName(actor, lockOn);\n\n  memmy.enableEffect(lockOnEffect);\n\n  let chatMessage = `${actor.name} locks on to the creature that attacked them, gaining advantage on attack rolls against it until the end of their next turn. The creature also gets disadvanate on saving throws against ${actor.name}'s ${archaicArtsItemLink}!' `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeThickSkin() {\n  // generate dialog content\n  let content = `\n    <form>\n        <div class=\"form-group\">\n            <label>Please enter the amount of damage you took</label>\n            <input id=\"damage\" type=\"number\" min=\"0\"></input>\n        </div>\n    </form>\n  `;\n\n  // generate OK button\n  let okButton = {\n    icon: \"\",\n    label: \"OK\",\n    callback: (html) => {\n      let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n      \n      if (!damage) {\n        memmy.warn(\"You need to provide the amount of damage you received!\");\n        return;\n      }\n\n      let maxHeal = Math.floor(damage / 2);\n      let siphonerLevel = memmy.getItemByNameAndType(actor, \"Siphoner\", \"class\").data.data.levels;\n      let tempHitPoints = Math.min(siphonerLevel, maxHeal);\n      memmy.setTemporaryHitPoints(actor, tempHitPoints);\n\n      let chatMessage = `${actor.name} thickens their skin, gaining ${tempHitPoints} temporary hit points!`;\n      memmy.printChatMessage(chatMessage);\n    },\n  };\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: okButton,\n      cancel: cancelButton,\n    },\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"data":{"name":"On the Edge","type":"script","scope":"global","command":"const memmy = game.modules.get(\"memmy\").api;\nconst title = \"On The Edge\";\nconst cancelButton = {\n  icon: \"\",\n  label: \"Cancel\",\n};\n\nconst bwb = memmy.names.features.betterWhenBleeding;\nconst bulkUp = memmy.names.features.bulkUp;\nconst intensify = memmy.names.features.intensify;\nconst lockOn = memmy.names.features.lockOn;\n\nconst bwbItemLink = \"@Item[L7AUdlUWMAum0zhu]{Better When Bleeding}\";\nconst archaicArtsItemLink = \"@Item[OM7SdcYcni5VIruv]{Archaic Arts}\";\n\nif (args[0].tag === \"OnUse\") {\n  // get bulk up button\n  let bulkUpButton = {\n    icon: \"\",\n    label: \"Bulk Up\",\n    callback: executeBulkUp,\n  };\n\n  // get intensify button\n  let intensifyButton = {\n    icon: \"\",\n    label: \"Intensify\",\n    callback: executeIntensify,\n  };\n\n  // get lock on button\n  let lockOnButton = {\n    icon: \"\",\n    label: \"Intensify\",\n    callback: executeIntensify,\n  };\n\n  // get thick skin button\n  let thickSkinButton = {\n    icon: \"\",\n    label: \"Thick Skin\",\n    callback: executeThickSkin,\n  };\n\n  // render dialog\n  new Dialog({\n    title: title,\n    content: `Please select an effect: `,\n    buttons: {\n      bulkUp: bulkUpButton,\n      intensify: intensifyButton,\n      lockOn: lockOnButton,\n      thickSkin: thickSkinButton,\n      cancel: cancelButton,\n    },\n    default: \"cancel\",\n  }).render(true);\n}\n\nfunction executeBulkUp() {\n  var betterWhenBleedingEffect = memmy.getEffectByName(actor, bwb);\n  var bulkUpEffect = memmy.getEffectByName(actor, bulkUp);\n\n  memmy.disableEffect(betterWhenBleedingEffect);\n  memmy.enableEffect(bulkUpEffect);\n\n  let chatMessage = `${actor.name} bulks up, and ignores his AC penalty from ${bwbItemLink} until the end of their next turn.`;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeIntensify() {\n  var intensifyEffect = memmy.getEffectByName(actor, intensify);\n\n  memmy.enableEffect(intensifyEffect);\n\n  let chatMessage = `${actor.name} intensifies, adding their constitution modifier to the damage rolls of their ${archaicArtsItemLink} and weapon attacks until the end of their next turn! `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeLockOn() {\n  var lockOnEffect = memmy.getEffectByName(actor, lockOn);\n\n  memmy.enableEffect(lockOnEffect);\n\n  let chatMessage = `${actor.name} locks on to the creature that attacked them, gaining advantage on attack rolls against it until the end of their next turn. The creature also gets disadvanate on saving throws against ${actor.name}'s ${archaicArtsItemLink}!' `;\n  memmy.printChatMessage(chatMessage);\n}\n\nfunction executeThickSkin() {\n  // generate dialog content\n  let content = `\n    <form>\n        <div class=\"form-group\">\n            <label>Please enter the amount of damage you took</label>\n            <input id=\"damage\" type=\"number\" min=\"0\"></input>\n        </div>\n    </form>\n  `;\n\n  // generate OK button\n  let okButton = {\n    icon: \"\",\n    label: \"OK\",\n    callback: (html) => {\n      let damage = parseInt(html.find(\"[id=damage]\")[0].value);\n      \n      if (!damage) {\n        memmy.warn(\"You need to provide the amount of damage you received!\");\n        return;\n      }\n\n      let maxHeal = Math.floor(damage / 2);\n      let siphonerLevel = memmy.getItemByNameAndType(actor, \"Siphoner\", \"class\").data.data.levels;\n      let tempHitPoints = Math.min(siphonerLevel, maxHeal);\n      memmy.setTemporaryHitPoints(actor, tempHitPoints);\n\n      let chatMessage = `${actor.name} thickens their skin, gaining ${tempHitPoints} temporary hit points!`;\n      memmy.printChatMessage(chatMessage);\n    },\n  };\n\n  new Dialog({\n    title: title,\n    content: content,\n    buttons: {\n      ok: okButton,\n      cancel: cancelButton,\n    },\n  }).render(true);\n}","author":"V6xxeiXU05Zy6pPy"},"options":{},"apps":{},"compendium":null}}},"img":"modules/memmy/assets/icons/bulk-up.jpg","effects":[{"_id":"XPtrZWYrmG9a7Okm","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[{"key":"data.bonuses.mwak.damage","value":"@abilities.con.mod","mode":2,"priority":20},{"key":"data.bonuses.rwak.damage","value":"@abilities.con.mod","mode":2,"priority":20},{"key":"data.bonuses.archarts.damage","value":"@abilities.con.mod","mode":2,"priority":20}],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Intensify","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true},{"_id":"8S6m2kg6sAPTcP1E","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Lock On","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true},{"_id":"xETrb2VghHQk9u6m","flags":{"dae":{"stackable":false,"transfer":true}},"changes":[],"disabled":true,"duration":{"startTime":null,"seconds":null,"rounds":null,"turns":null,"startRound":null,"startTurn":null},"icon":"modules/memmy/assets/icons/bulk-up.jpg","label":"Bulk Up","origin":"Item.6gJKQx4k812Yc20o","tint":"","transfer":true}],"_id":"85Dk64lhPTnaRbtk"}
